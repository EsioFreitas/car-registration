{"version":3,"sources":["components/UI/Input/Input.js","components/Form/Form.js","helpers/inputs.js","helpers/DB.js","components/Table/Table.js","container/homePage.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","elementType","react_default","a","createElement","Object","assign","elementConfig","value","onChange","changed","rows","className","label","form","keys","inputs","map","Input_Input","key","config","event","type","onClick","e","submit","marca","placeholder","modelo","ano","renavam","placa","cor","obs","min","max","DB","id","car","table","db","idxC","carTd","idx","react_csv","data","dataDownload","downloadData","filename","HomePage","state","inputsContent","InputsHelper","dbState","DBHelper","_this","forEach","element","dataEl","push","setState","inputsChange","objectSpread","inputChange","target","preventDefault","dataCar","length","tableCar","toConsumableArray","Form_Form","this","Table_Table","Component","App","container_homePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d73540c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.scss';\n\nconst input = props => {\n    let inputElement = null;\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input {...props.elementConfig} value={props.value} onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea {...props.elementConfig} value={props.value} onChange={props.changed} rows='4'/>;\n            break;\n        default:\n            break;\n    }\n    return (\n        <label className='form__label'>{props.label}:\n            {inputElement}\n        </label>\n    )\n}\n\nexport default input;","import React from 'react';\n\nimport Input from '../UI/Input/Input';\n\nimport './Form.scss';\n\nconst form = props => (\n    <form className='form'>\n        {\n            Object.keys(props.inputs).map(input => (\n                <Input key={input}\n                    elementConfig={props.inputs[input].config}\n                    value={props.inputs[input].value}\n                    changed={(event) => props.changed(event, input)}\n                    elementType={props.inputs[input].type}\n                    label={props.inputs[input].label} />\n            ))\n        }\n        <div onClick={(e) => props.submit(e)}\n            className='btn btn-cadastro'>\n            Cadastrar Veículo\n        </div>\n    </form>\n);\n\nexport default form;","const inputs = {\n    marca: {\n        label: \"Marca\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Honda'\n        },\n        value: '',\n    },\n    modelo: {\n        label: \"Modelo\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Fit EXL 1.5 Flex 16V 5p Mec'\n        },\n        value: '',\n    },\n    ano: {\n        label: \"Ano\",\n        type: 'input',\n        config: {\n            type: 'number',\n            placeholder: '2009'\n        },\n        value: '',\n    },\n    renavam: {\n        label: \"Renavam\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: '69047446258'\n        },\n        value: '',\n    },\n    placa: {\n        label: \"Placa\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'MZS-2703'\n        },\n        value: '',\n    },\n    cor: {\n        label: \"Cor\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Verde'\n        },\n        value: '',\n    },\n    obs: {\n        label: \"Observações\",\n        type: 'textarea',\n        config: {\n            type: 'text',\n            placeholder: 'Coloque detalhes inportantes sobre seu veículo',\n            min: '1000',\n            max: '2020'\n        },\n        value: '',\n    }\n}\n\nexport default inputs","const DB =[\n    {\n        id: 1,\n        car: {\n            marca:'Citroen',\n            modelo: 'C5 3.0 24V 210cv 4p Aut.',\n            ano: 2001,\n            renavam: '37065503111',\n            placa: 'MZP-4935',\n            cor: 'Marrom',\n            obs: '',\n        }\n    },\n    {\n        id: 2,\n        car: {\n            marca:'Cadillac',\n            modelo: 'Deville/Eldorado 4.9',\n            ano: 1991,\n            renavam: '66538367744',\n            placa: 'MZX-5148',\n            cor: 'Prata',\n            obs: '',\n        }\n    },\n    {\n        id: 3,\n        car: {\n            marca:'LIFAN',\n            modelo: 'X60 1.8 16V 128cv 5p Mec.',\n            ano: 2013,\n            renavam: '22626789010',\n            placa: 'MZX-0623',\n            cor: 'Preto',\n            obs: '',\n        }\n    }\n]\n\nexport default DB;","import React, { Fragment } from 'react';\nimport { CSVLink } from \"react-csv\";\n\nimport './Table.scss';\n\nconst table = props => {\n\n    return (\n        <div className=\"table\">\n            <table>\n                <caption>Carros cadastrados</caption>\n                <thead>\n                    <tr>\n                        <td id='marca'>Marca</td>\n                        <td id='modelo'>Modelo</td>\n                        <td id='ano'>Ano</td>\n                        <td id='renavam'>Renavam</td>\n                        <td id='placa'>Placa</td>\n                        <td id='cor'>Cor</td>\n                        <td id='obs'>Observações</td>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        props.db.map((db, idxC) => (\n                            <tr key={db.id}>\n                                {Object.keys(db.car).map((carTd, idx) => (\n                                    <td key={idx}>{props.db[idxC].car[carTd]}</td>\n                                ))}\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </table>\n            <CSVLink data={props.dataDownload}\n                onClick={() => props.downloadData()}\n                filename={\"car-registration.csv\"}\n                className=\"btn btn-primary\">\n                Download\n            </CSVLink>\n        </div>\n    );\n}\n\nexport default table;","import React, { Component } from 'react';\n\n\nimport Form from '../components/Form/Form';\nimport InputsHelper from '../helpers/inputs';\nimport DBHelper from '../helpers/DB';\nimport Table from '../components/Table/Table';\n\nimport './homePage.scss';\n\nclass HomePage extends Component {\n    state = {\n        inputsContent: InputsHelper,\n        dbState: DBHelper,\n        dataDownload: []\n    }\n\n    render() {\n        return (\n            <main>\n                <h1>Cadastre seu veículo</h1>\n                <div className='container'>\n                    <div className='container__form'>\n                        <Form inputs={this.state.inputsContent}\n                            changed={this.changed}\n                            submit={this.submit} />\n                    </div>\n                    <div className='container__table'>\n                        <Table db={this.state.dbState}\n                            downloadData={this.downloadData}\n                            dataDownload={this.state.dataDownload} />\n                    </div>\n                </div>\n            </main>\n        )\n    }\n\n    downloadData = () => {\n        let data = [];\n        this.state.dbState.forEach(element => {\n            let dataEl = {\n                id: element.id,\n                marca: element.car['marca'],\n                modelo: element.car['modelo'],\n                ano: element.car['ano'],\n                renavam: element.car['renavam'],\n                placa: element.car['placa'],\n                cor: element.car['cor'],\n                obs: element.car['obs'],\n            };\n\n            data.push(dataEl);\n        });\n\n        this.setState({ dataDownload: data });\n    }\n\n    changed = (event, idx) => {\n        const inputsChange = { ...this.state.inputsContent };\n        const inputChange = { ...inputsChange[idx] }\n        inputChange.value = event.target.value;\n        inputsChange[idx] = inputChange;\n\n        this.setState({ inputsContent: inputsChange })\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const dataCar = this.state.inputsContent;\n        if (dataCar['marca'].value === '' ||\n            dataCar['renavam'].value === '' ||\n            dataCar['placa'].value === '') {\n            return;\n        }\n        const data = {\n            id: this.state.dbState.length + 1,\n            car: {\n                marca: dataCar['marca'].value,\n                modelo: dataCar['modelo'].value,\n                ano: dataCar['ano'].value,\n                renavam: dataCar['renavam'].value,\n                placa: dataCar['placa'].value,\n                cor: dataCar['cor'].value,\n                obs: dataCar['obs'].value,\n            }\n        }\n\n        for (let data in dataCar) {\n            dataCar[data].value = ''\n        }\n\n        const tableCar = [...this.state.dbState];\n        tableCar.push(data);\n\n        this.setState({ dbState: tableCar, inputChange: dataCar });\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\n\nimport HomePage from './container/homePage'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HomePage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}