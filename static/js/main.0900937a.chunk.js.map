{"version":3,"sources":["components/UI/Input/Input.js","components/Form/Form.js","helpers/inputs.js","helpers/DB.js","components/Table/Table.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","container/homePage.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","elementType","react_default","a","createElement","Object","assign","elementConfig","value","onChange","changed","rows","className","label","form","keys","inputs","map","Input_Input","key","config","event","type","onClick","cancelSubmit","e","submit","dono","placeholder","cpf","marca","modelo","ano","renavam","placa","cor","DB","id","car","nome","table","dataTable","db","forEach","element","dataEl","push","cadastrar","sort","b","toUpperCase","idx","el","react_csv","data","dataDownload","downloadData","filename","backdrop","show","clicked","modal","react","Backdrop_Backdrop","style","transform","opacity","children","HomePage","state","inputsContent","InputsHelper","dbState","DBHelper","showModal","error","_this","proprietario","setState","inputsChange","objectSpread","inputChange","target","preventDefault","dataCar","length","tableCar","toConsumableArray","textTransform","fontWeight","Modal_Modal","this","color","Form_Form","disable","Table_Table","Component","App","container_homePage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0900937a.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Input.scss';\n\nconst input = props => {\n    let inputElement = null;\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input {...props.elementConfig} value={props.value} onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea {...props.elementConfig} value={props.value} onChange={props.changed} rows='4'/>;\n            break;\n        default:\n            break;\n    }\n    return (\n        <label className='form__label'>{props.label}:\n            {inputElement}\n        </label>\n    )\n}\n\nexport default input;","import React from 'react';\n\nimport Input from '../UI/Input/Input';\n\nimport './Form.scss';\n\nconst form = props => (\n    <form className='form'>\n        {\n            Object.keys(props.inputs).map(input => (\n                <Input key={input}\n                    elementConfig={props.inputs[input].config}\n                    value={props.inputs[input].value}\n                    changed={(event) => props.changed(event, input)}\n                    elementType={props.inputs[input].type}\n                    label={props.inputs[input].label} />\n            ))\n        }\n\n        <div className='form__btns'>\n\n            <div className='btn btn--cancel'\n                 onClick={props.cancelSubmit}>\n                Cancelar\n            </div>\n            <div onClick={(e) => props.submit(e)}\n                className='btn btn-cadastro'>\n                Cadastrar\n            </div>\n        </div>\n    </form>\n);\n\nexport default form;","const inputs = {\n    dono: {\n        label: \"Propriet√°rio\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Lucas Tavares'\n        },\n        value: '',\n    },\n    cpf: {\n        label: \"CPF\",\n        type: 'input',\n        config: {\n            type: 'number',\n            placeholder: '05749578506'\n        },\n        value: '',\n    },\n    marca: {\n        label: \"Marca\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Honda'\n        },\n        value: '',\n    },\n    modelo: {\n        label: \"Modelo\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Fit EXL 1.5 Flex 16V 5p Mec'\n        },\n        value: '',\n    },\n    ano: {\n        label: \"Ano\",\n        type: 'input',\n        config: {\n            type: 'number',\n            placeholder: '2009'\n        },\n        value: '',\n    },\n    renavam: {\n        label: \"Renavam\",\n        type: 'input',\n        config: {\n            type: 'number',\n            placeholder: '69047446258'\n        },\n        value: '',\n    },\n    placa: {\n        label: \"Placa\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'MZS-2703'\n        },\n        value: '',\n    },\n    cor: {\n        label: \"Cor\",\n        type: 'input',\n        config: {\n            type: 'text',\n            placeholder: 'Verde'\n        },\n        value: '',\n    }\n}\n\nexport default inputs","const DB =[\n    {\n        id: 1,\n        car: {\n            marca:'Citroen',\n            modelo: 'C5 3.0 24V 210cv 4p Aut.',\n            ano: 2001,\n            renavam: '37065503111',\n            placa: 'MZP-4935',\n            cor: 'Marrom',\n            dono: {\n                nome: 'Pedro Henrique',\n                cpf: '12345678910'\n            }\n        }\n    },\n    {\n        id: 2,\n        car: {\n            marca:'Cadillac',\n            modelo: 'Deville/Eldorado 4.9',\n            ano: 1991,\n            renavam: '66538367744',\n            placa: 'MZX-5148',\n            cor: 'Prata',\n            dono: {\n                nome: 'Maria Jo√£o',\n                cpf: '98765432100'\n            }\n        }\n    },\n    {\n        id: 3,\n        car: {\n            marca:'LIFAN',\n            modelo: 'X60 1.8 16V 128cv 5p Mec.',\n            ano: 2013,\n            renavam: '22626789010',\n            placa: 'MZX-0623',\n            cor: 'Preto',\n            dono: {\n                nome: 'Carla Amanda',\n                cpf: '74185296300'\n            }\n        }\n    }\n]\n\nexport default DB;","import React from 'react';\nimport { CSVLink } from \"react-csv\";\n\nimport './Table.scss';\n\nconst table = props => {\n    let dataTable = []\n    props.db.forEach(element => {\n        let dataEl = {\n            dono: element.car['dono'].nome,\n            cpf: element.car['dono'].cpf,\n            marca: element.car['marca'],\n            modelo: element.car['modelo'],\n            ano: element.car['ano'],\n            renavam: element.car['renavam'],\n            placa: element.car['placa'],\n            cor: element.car['cor'],\n        };\n\n        dataTable.push(dataEl);\n    });\n\n    return (\n        <div className='table-section'>\n            <div className='btn' \n                 onClick={props.cadastrar}>\n                Cadastrar ve√≠culo\n            </div>\n            <div className='table-section__table'>\n\n                <table >\n                    <caption>Carros cadastrados</caption>\n\n                    <thead className='table-section__thead'>\n                        <tr>\n                            <td>Propriet√°rio</td>\n                            <td>CPF</td>\n                            <td>Marca</td>\n                            <td>Modelo</td>\n                            <td>Ano</td>\n                            <td>Renavam</td>\n                            <td>Placa</td>\n                            <td>Cor</td>\n                        </tr>\n                    </thead>\n                    <tbody className='table-section__tbody'>\n                        {\n                            dataTable.sort( (a, b) => {\n                                return  a.dono.toUpperCase() < b.dono.toUpperCase() ? -1 : a.dono.toUpperCase() > b.dono.toUpperCase()   ? 1 : 0\n                            }).map((db, idx )=> (\n                            <tr  key={idx}>\n                                {Object.keys(db).map( el => (\n                                    <td key={el}> \n                                        {db[el]}\n                                    </td>\n                                ))}\n                            </tr>\n                            ))\n                        }\n                    </tbody>\n                </table>\n            </div>\n            <CSVLink data={props.dataDownload}\n                onClick={() => props.downloadData()}\n                filename={\"car-registration.csv\"}\n                className=\"btn btn-primary\">\n                Download\n            </CSVLink>\n        </div>\n    );\n}\n\n//{props.db[idxC].car[carTd]}\nexport default table;","import React from 'react';\n\nimport './Backdrop.scss';\n\nconst backdrop = (props) => (\n    props.show ? <div className='backdrop'onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React, {Fragment} from 'react';\n\nimport Backdrop from '../Backdrop/Backdrop';\n\nimport './Modal.scss'\n\nconst modal = props => (\n    <Fragment>\n        <Backdrop show={props.show} clicked={props.cancelSubmit}/>\n        <div className='modal'\n             style={{\n                transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n                opacity: props.show ? '1' : '0'\n             }}>\n            {props.children}\n        </div>\n    </Fragment>\n);\n\nexport default modal;","import React, { Component } from 'react';\n\n\nimport Form from '../components/Form/Form';\nimport InputsHelper from '../helpers/inputs';\nimport DBHelper from '../helpers/DB';\nimport Table from '../components/Table/Table';\nimport Modal from '../components/UI/Modal/Modal';\n\nimport './homePage.scss';\n\nclass HomePage extends Component {\n    state = {\n        inputsContent: InputsHelper,\n        dbState: DBHelper,\n        dataDownload: [],\n        showModal: false,\n        error: false\n    }\n\n    render() {\n        return (\n            <main>\n                <h1 style={{ textTransform: 'uppercase', fontWeight: 'bold' }}>Car registration</h1>\n\n                <Modal show={this.state.showModal} cancelSubmit={this.cancelSubmit}>\n                    <h2 style={this.state.error ? { color: '#F2234C' } : null}>\n                        {this.state.error ? 'Carro j√° cadastrado' : 'cadastro'}\n                    </h2>\n                    <Form inputs={this.state.inputsContent}\n                        changed={this.changed}\n                        submit={this.submit}\n                        cancelSubmit={this.cancelSubmit}\n                        disable={this.state.error} />\n                </Modal>\n\n                <Table db={this.state.dbState}\n                    downloadData={this.downloadData}\n                    dataDownload={this.state.dataDownload}\n                    cadastrar={this.showModal} />\n            </main>\n        )\n    }\n\n    downloadData = () => {\n        let data = [];\n        this.state.dbState.forEach(element => {\n            let dataEl = {\n                id: element.id,\n                proprietario: element.car.dono['nome'],\n                cpf: element.car.dono['cpf'],\n                marca: element.car['marca'],\n                modelo: element.car['modelo'],\n                ano: element.car['ano'],\n                renavam: element.car['renavam'],\n                placa: element.car['placa'],\n                cor: element.car['cor']\n            };\n\n            data.push(dataEl);\n        });\n\n        this.setState({ dataDownload: data });\n    }\n\n    changed = (event, idx) => {\n        const inputsChange = { ...this.state.inputsContent };\n        const inputChange = { ...inputsChange[idx] }\n        inputChange.value = event.target.value;\n        inputsChange[idx] = inputChange;\n\n        this.setState({ inputsContent: inputsChange })\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const dataCar = this.state.inputsContent;\n        if (dataCar['marca'].value === '' ||\n            dataCar['renavam'].value === '' ||\n            dataCar['placa'].value === '') {\n            return;\n        }\n\n\n        const data = {\n            id: this.state.dbState.length + 1,\n            car: {\n                dono: {\n                    nome: dataCar['dono'].value,\n                    cpf: dataCar['cpf'].value,\n                },\n                marca: dataCar['marca'].value,\n                modelo: dataCar['modelo'].value,\n                ano: dataCar['ano'].value,\n                renavam: dataCar['renavam'].value,\n                placa: dataCar['placa'].value,\n                cor: dataCar['cor'].value,\n            }\n        }\n\n        for (let data in dataCar) {\n            dataCar[data].value = ''\n        }\n\n        const tableCar = [...this.state.dbState];\n        tableCar.push(data);\n\n        this.setState({ dbState: tableCar, inputChange: dataCar });\n\n        this.cancelSubmit();\n    }\n\n    showModal = () => {\n        this.setState({ showModal: true });\n    }\n\n    cancelSubmit = () => {\n        this.setState({ showModal: false });\n        const dataCar = this.state.inputsContent;\n        for (let data in dataCar) {\n            dataCar[data].value = ''\n        }\n        this.setState({ inputChange: dataCar });\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\n\nimport HomePage from './container/homePage'\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <HomePage/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}